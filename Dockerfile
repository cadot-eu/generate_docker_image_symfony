# Stage de build - uniquement pour l'installateur d'extensions
FROM php:8.2-fpm-alpine AS builder

# Message de d√©marrage
RUN echo "----------------------------------------------------------------"
RUN echo "üöÄ √âTAPE 1: PR√âPARATION DE L'ENVIRONNEMENT DE BUILD"
RUN echo "----------------------------------------------------------------"

# Installation de l'installateur d'extensions
ADD --chmod=0755 https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions /usr/local/bin/

# Stage final
FROM php:8.2-fpm-alpine

# D√©claration des arguments avec valeurs par d√©faut
ARG ENABLED_EXTENSIONS=""
ARG AUTRES_EXTENSIONS=""
ARG MODE="prod"

# Message de d√©marrage du stage final
RUN echo "----------------------------------------------------------------"
RUN echo "üöÄ √âTAPE 2: CONSTRUCTION DE L'IMAGE FINALE"
RUN echo "----------------------------------------------------------------"

# D√©finir MODE comme variable d'environnement
ENV MODE=$MODE \
    SYMFONY_VERSION=7 \
    COMPOSER_ALLOW_SUPERUSER=1 \
    PATH=/var/www/html/vendor/bin:$PATH

# Copie de l'installateur d'extensions depuis le builder
COPY --from=builder /usr/local/bin/install-php-extensions /usr/local/bin/

# Copie des fichiers de configuration
COPY ./BuildConfig /tmp/BuildConfig

# Installation de toutes les extensions dans l'image finale
RUN echo "----------------------------------------------------------------" && \
    echo "üîß INSTALLATION DES EXTENSIONS PHP" && \
    echo "----------------------------------------------------------------" && \
    echo "Extensions activ√©es: $ENABLED_EXTENSIONS" && \
    echo "Autres extensions: $AUTRES_EXTENSIONS" && \
    echo "Mode: $MODE" && \
    \
    # Installation des extensions PHP de base
    echo "‚è≥ Installation des extensions de base..." && \
    install-php-extensions @composer apcu intl memcached opcache zip gnupg && \
    echo "‚úÖ Extensions de base install√©es avec succ√®s" && \
    \
    # Installation des extensions sp√©cifi√©es si pr√©sentes
    if [ -n "$ENABLED_EXTENSIONS" ]; then \
        echo "‚è≥ Installation des extensions personnalis√©es: $ENABLED_EXTENSIONS" && \
        install-php-extensions $(echo $ENABLED_EXTENSIONS | tr ',' ' ') && \
        echo "‚úÖ Extensions personnalis√©es install√©es avec succ√®s"; \
    else \
        echo "‚ÑπÔ∏è Aucune extension personnalis√©e √† installer"; \
    fi && \
    \
    # Installation conditionnelle de Xdebug
    if [ "$MODE" = "dev" ]; then \
        echo "‚è≥ Mode DEV d√©tect√© - Installation de Xdebug..." && \
        install-php-extensions xdebug && \
        # Copie du fichier de configuration Xdebug
        echo "‚è≥ Copie du fichier de configuration Xdebug..." && \
        #cat "/tmp/BuildConfig/xdebug.ini" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \
        echo "‚úÖ Configuration Xdebug install√©e"; \
    else \
        echo "‚ÑπÔ∏è Mode PROD d√©tect√© - Xdebug non install√©"; \
    fi && \
    \
    # Installation des d√©pendances syst√®me
    echo "‚è≥ Installation des d√©pendances syst√®me..." && \
    apk add --no-cache nginx supervisor git && \
    echo "‚úÖ D√©pendances syst√®me install√©es" && \
    \
    # Installation conditionnelle de Chromium
    if echo "$AUTRES_EXTENSIONS" | grep -q "\bchromium\b"; then \
        echo "‚è≥ Installation de Chromium..." && \
        apk add --no-cache chromium && \
        echo "‚úÖ Chromium install√© avec succ√®s"; \
    fi && \
    \
    # Installation conditionnelle de LaTeX
    if echo "$AUTRES_EXTENSIONS" | grep -q "\blatex\b"; then \
        echo "‚è≥ Installation de LaTeX..." && \
        apk add --no-cache texlive && \
        echo "‚úÖ LaTeX install√© avec succ√®s"; \
    fi && \
    \
    # Cr√©ation des r√©pertoires n√©cessaires
    echo "‚è≥ Cr√©ation des r√©pertoires..." && \
    mkdir -p /app/var/log/supervisor /var/run/supervisor /etc/supervisor/conf.d && \
    chmod -R 777 /app/var/log/supervisor /var/run/supervisor && \
    echo "‚úÖ R√©pertoires cr√©√©s" && \
    \
    # Alias Symfony console
    echo 'alias sc="php /app/bin/console"' >> ~/.bashrc && \
    \
    # Nettoyage
    echo "üßπ Nettoyage des fichiers temporaires..." && \
    rm -rf /tmp/* /var/cache/apk/* && \
    echo "‚úÖ Nettoyage termin√©"

# Message avant la copie des fichiers de configuration
RUN echo "----------------------------------------------------------------"
RUN echo "üìÅ COPIE DES FICHIERS DE CONFIGURATION"
RUN echo "----------------------------------------------------------------"

# Copie des fichiers de configuration
COPY ./BuildConfig/nginx.conf /etc/nginx/http.d/default.conf
COPY ./BuildConfig/php.ini /usr/local/etc/php/php.ini
COPY ./BuildConfig/supervisord.conf /etc/supervisord.conf

COPY ./BuildConfig /tmp/BuildConfig
# Configuration conditionnelle de PHP
RUN echo "‚è≥ Application de la configuration PHP pour le mode $MODE..." && \
    if [ -f "/tmp/BuildConfig/php_${MODE}.ini" ]; then \
        cat "/tmp/BuildConfig/php_${MODE}.ini" >> /usr/local/etc/php/php.ini && \
        echo "‚úÖ Configuration PHP du mode $MODE appliqu√©e"; \
    else \
        echo "‚ÑπÔ∏è Aucun fichier de configuration sp√©cifique trouv√© pour le mode $MODE"; \
    fi 
    # && \
    #rm -rf /tmp/BuildConfig

# Message avant la copie du code
RUN echo "----------------------------------------------------------------"
RUN echo "üì¶ COPIE DU CODE SOURCE"
RUN echo "----------------------------------------------------------------"

# R√©pertoire de travail et copie du code
WORKDIR /app
RUN mkdir -p /var/log/supervisor

# Message final
RUN echo "----------------------------------------------------------------"
RUN echo "‚ú® IMAGE DOCKER CONSTRUITE AVEC SUCC√àS"
RUN echo "----------------------------------------------------------------"

# R√©pertoire de travail et copie du code
WORKDIR /app

# Copier le script d'entrypoint dans l'image Docker
COPY BuildConfig/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh

# Rendre le script ex√©cutable
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# D√©finir le script comme point d'entr√©e du conteneur
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

# Cr√©er le r√©pertoire pour les logs de supervisord
RUN mkdir -p /var/log/supervisor

# D√©finir supervisord comme processus principal √† lancer
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]
